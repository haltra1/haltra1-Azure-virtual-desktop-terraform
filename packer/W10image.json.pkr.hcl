# https://www.packer.io/docs/from-1.5/variables#type-constraints for more info.
# "timestamp" template function replacement
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }


# https://www.packer.io/docs/from-1.5/blocks/source
source "azure-arm" "autogenerated_1" {
  client_id                         = var.client_id
  client_secret                     = var.client_secret
  communicator                      = "winrm"
  image_offer                       = var.image_offer
  image_publisher                   = var.image_publisher
  image_sku                         = var.image_sku
  location                          = var.location
  managed_image_name                = var.managed_image_name
  managed_image_resource_group_name = var.managed_image_resource_group_name
  os_type                           = var.os_type

  # https://www.packer.io/docs/builders/azure/arm  
  shared_image_gallery_destination {
    gallery_name        = "WVDTFsig"
    image_name          = var.managed_image_name
    image_version       = "1.0.0"
    replication_regions = ["east us"]
    resource_group      = var.managed_image_resource_group_name
    subscription        = var.subscription_id
  }
  subscription_id = var.subscription_id
  vm_size         = var.vm_size
  winrm_insecure  = "true"
  winrm_timeout   = "3m"
  winrm_use_ssl   = "true"
  winrm_username  = "packer"
}

# https://www.packer.io/docs/from-1.5/blocks/build
build {
  sources = ["source.azure-arm.autogenerated_1"]

  provisioner "powershell" {
    inline = [
      " # NOTE: the following *3* lines are only needed if the you have installed the Guest Agent.",
      "  while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
      "  # while ((Get-Service WindowsAzureTelemetryService).Status -ne 'Running') { Start-Sleep -s 5 }",
      "  while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
    "if( Test-Path $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml -Force}", "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit /mode:vm", "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"]
  }
}
